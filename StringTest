import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.time.Duration;

class StringTest {

    private String str;

    @BeforeAll
    static void beforeAll(){
        System.out.println("Text before all test");
    }

    @AfterAll
    static void afterAll(){
        System.out.println("Text after all test");
    }

    @BeforeEach
    void beforeEach(TestInfo info){
    System.out.println("Text before each test: " + info.getDisplayName());
    }

    @AfterEach
    void afterEach(TestInfo info){
        System.out.println("Text after each test: " + info.getDisplayName());
    }

    @Test
    @Disabled
    void notImplemented(){
        fail("Not yet implemented.");
    }

    @Test
    void length_basic(){
        int actualLength = "abcd".length();
        int expectedLength = 4;
        assertEquals(expectedLength, actualLength);
    }

    @Test
    void length_greater_than_zero(){
        assertTrue("ABCD".length()>0);
        assertTrue("ABC".length()>0);
        assertTrue("A".length()>0);
        assertTrue("DEF".length()>0);
    }

    @ParameterizedTest
    @ValueSource(strings = {"ABCD", "ABC", "A", "DEF"})
    void length_greater_than_zero_using_parameterized_test(String str){
        assertTrue(str.length()>0);
    }

    @ParameterizedTest(name = "{0} toUpperCase is {1}")
    @CsvSource(value = {"abcd, ABCD", "abc, ABC", "'',''", "abcdefg, ABCDEFG"})
    void uppercase(String word, String capitalizedWord){
        assertEquals(capitalizedWord, word.toUpperCase());
    }

    @ParameterizedTest(name = "{0} length is {1}")
    @CsvSource(value = {"abcd, 4", "abc, 3", "'', 0", "abcdefg, 7"})
    void length(String word, int expectedLength) {
        assertEquals(expectedLength, word.length());
    }

    @Test
    @DisplayName("When length is null, throw an exception")
    void length_exception(){
        String str = null;
        assertThrows(NullPointerException.class,
                () -> {
                    str.length();
                }
        );
    }

    @Test
    void performanceTest(){
        assertTimeout(Duration.ofSeconds(3), () -> {
            for(int i = 0; i <= 1000; i++) {
                int j = i;
                System.out.println(j);
            }
        }
        );
    }

    @Test
    void toUpperCase_basic(){
        String str = "abcd";
        String result = str.toUpperCase();
        assertNotNull(result);
        assertEquals("ABCD", result);
    }

    @Test
    @RepeatedTest(10)
    void contains_basic(){
        assertFalse("abcdefgh".contains("ijk"));
    }

    @Test
    void split_basic(){
        String str = "abc def ghi";
        String actualResult[] = str.split(" ");
        String[] expectedResult = new String[] {"abc", "def", "ghi"};
        assertArrayEquals(expectedResult, actualResult);
    }

    @Nested
    @DisplayName("For an empty String")
    class EmptyStringTests {

        @BeforeEach
        void setToEmpty() {
            str = "";
        }

        @Test
        @DisplayName("length should be zero")
        void lengthIsZero() {
            assertEquals(0, str.length());
        }

        @Test
        @DisplayName("upper case is empty")
        void upperCaseIsEmpty() {
            assertEquals("", str.toUpperCase());
        }
    }
}
